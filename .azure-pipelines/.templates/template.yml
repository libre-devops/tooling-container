---
parameters:

  - name: AGENT_AMOUNT
    displayName: "The amount of agents you require"
    default: "1"
    type: string

  - name: COUNT
    default: "1"
    displayName: "The amount that the count should start at"
    type: string

  - name: USERNAME
    displayName: "Username to be passed for registry login"
    type: string

  - name: PASSWORD
    displayName: "Password or access token for registry login"
    type: string

  - name: CONTEXT
    displayName: "The the path to your dockerfile"
    type: string

  - name: DOCKERFILE_NAME
    displayName: "The name of the Dockerfile"
    default: "Dockerfile"
    type: string

  - name: NORMAL_USER
    displayName: "The name for the container user"
    default: $(head /dev/urandom | tr -dc A-Za-z0-9 | head -c10)
    type: string

  - name: PYTHON3_VERSION
    displayName: "The version of python to be installed by from source"
    type: string
    default: "1.17.3"

  - name: GO_VERSION
    displayName: "The version of Go to be installed"
    type: string
    default: "3.10.1"

  - name: JAVA_VERSION
    displayName: "The version of java to be installed"
    type: string
    default: "17"

  - name: DOTNET_VERSION
    displayName: "The version of Dotnet to be installed"
    default: "6.0"
    type: string

  - name: REGISTRY
    displayName: "The target registry"
    default: "ghcr.io"
    type: string

  - name: IMAGE_NAME
    displayName: "The name of the image"
    type: string

  - name: TAGS
    displayName: "The tag of the image"
    type: string
    default: ":latest"

  - name: HOSTED_AGENT_IMAGE
    displayName: "The name of the vmImage for Azure Hosted Pools"
    type: string
    default: "ubuntu-latest"

################## DO NOT EDIT ANYTHING PAST HERE UNLESS YOU KNOW WHAT YOU ARE DOING ##################

jobs:
  - job: build_container
    pool:
      vmImage: ${{ parameters.HOSTED_AGENT_IMAGE }}
    workspace:
      clean: all
    displayName: Build Image - ${{ parameters.IMAGE_NAME }}${{ parameters.COUNT }}-${{ parameters.AGENT_AMOUNT }}${{ parameters.TAGS }}
    timeoutInMinutes: 120

    steps:

      - checkout: self

      - bash: |
          
          podman login -u ${{ parameters.USERNAME }} -p ${{ parameters.PASSWORD }} ${{ parameters.REGISTRY }} && \
          
          for INDEX in $(seq ${{ parameters.COUNT }} ${{ parameters.AGENT_AMOUNT}})
          do
          
          podman build \
          --file="${{ parameters.DOCKERFILE_NAME }}" \
          --tag="${{ parameters.REGISTRY }}/${{ parameters.USERNAME }}/${{ parameters.IMAGE_NAME }}${INDEX}${{ parameters.TAGS }}" \
          --build-arg NORMAL_USER="${{ parameters.NORMAL_USER }}"  \
          --build-arg ACCEPT_EULA="y" \
          --build-arg PYTHON3_VERSION="${{ parameters.PYTHON3_VERSION }}" \
          --build-arg DOTNET_VERSION="${{ parameters.DOTNET_VERSION }}" \
          --build-arg GO_VERSION="${{ parameters.GO_VERSION }}" \
          --build-arg JAVA_VERSION="${{ parameters.JAVA_VERSION }}" && \
          
          podman push "${{ parameters.REGISTRY }}/${{ parameters.USERNAME }}/${{ parameters.IMAGE_NAME }}${{ parameters.TAGS }}"
          
          done
          
          podman logout ${{ parameters.REGISTRY }}
        displayName: Run Podman Login, Build x${{ parameters.AGENT_AMOUNT }}, Push x${{ parameters.AGENT_AMOUNT }} and Logout
        workingDirectory: ${{ parameters.CONTEXT }}
